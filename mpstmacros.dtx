% \iffalse meta-comment
% vim: textwidth=75
%<*internal>
\iffalse
%</internal>
%<*readme>
|
----------:| --------------------------------------------------------------
mpstmacros:| Macros for multiparty session types
    Author:| Fangyi Zhou
    E-mail:| me@fangyi.io
   License:| The Unlicense
       See:| https://unlicense.org/

Short description:
A package for multiparty session type macros
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------:| --------------------------------------------------------------
mpstmacros:| Macros for multiparty session types
    Author:| Fangyi Zhou
    E-mail:| me@fangyi.io
   License:| The Unlicense
       See:| https://unlicense.org/

\endpreamble
\postamble

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>

This work consists of the file mpstmacros.dtx and a Makefile.
Running "make" generates the derived files README, mpstmacros.pdf and mpstmacros.sty.
Running "make inst" installs the files in the user's TeX tree.
Running "make install" installs the files in the local TeX tree.

\endpostamble

\usedir{tex/latex/mpstmacros}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/mpstmacros}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/mpstmacros}
\generate{
  \file{README.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{mpstmacros.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{mpstmacros}
%<*package>
    [2021/11/26 v1.00 A new LaTeX package]
%</package>
%<package>\RequirePackage[svgnames]{xcolor}
%<package>\RequirePackage{xifthen}
%<*driver>
\documentclass{ltxdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage[T1]{fontenc}
\usepackage{palatino}
\usepackage{mathpazo}
\usepackage[scale=0.85]{FiraMono}
\usepackage{FiraSans}
\usepackage{amsmath}
\usepackage{\jobname}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.dtx}
% \DoNotIndex{\newcommand, \newenvironment, \color, \colorlet, \withcolour,
%             \endinput, \upshape, \textbf, \textsf, \texttt, \mathbf, \mu,
%             \left, \right, \ifempty, \to, \ifthenelse, \isempty,
%             \mathbin, \mspace, \oplus}
% \iffalse
% https://tex.stackexchange.com/a/124809
% \fi
% \expandafter\DoNotIndex\expandafter{\string\{}
% \expandafter\DoNotIndex\expandafter{\string\}}
% \expandafter\DoNotIndex\expandafter{\string\&}
%
%\title{\textsf{mpstmacros} --- Macros for multiparty session types%
%\thanks{This file describes version \fileversion, last revised \filedate.}
%}
%\author{Fangyi Zhou\thanks{E-mail: me@fangyi.io}}
%\date{Released \filedate}
%
%\maketitle
%\iffalse
%\changes{v1.00}{2021/11/26}{First public release}
%\fi
% \begin{abstract}
%
% This package contains macros to typeset multiparty session types with
% standard constructs.
% Different syntactic categories are coloured differently, giving a better
% visual presentation and prevent potential confusions.
%
% \end{abstract}
%
% \section{Colouring and Formatting}
% We first describe the macros for setting colours: by design, we wish to
% give distinct colours for different syntax categories: namely,
% participants (roles), message labels, payload types, local types and
% global types.
% Optionally, type variables can be assigned a different colour, but
% is usually emphasised with a boldface font.
%
% \begin{itemize}
% \item
% \DescribeMacro{\colourRole}
% |\colourRole| defines the colour for roles, by default it is set to
% \withcolour{\colourRole}{Teal}.
%
% \item
% \DescribeMacro{\colourLabel}
% |\colourLabel| defines the colour for labels, by default it is set to
% \withcolour{\colourLabel}{Indigo}.
%
% \item
% \DescribeMacro{\colourPayload}
% |\colourPayload| defines the colour for payload types, by default it is
% set to \withcolour{\colourPayload}{DarkOrchid}.
%
% \item
% \DescribeMacro{\colourLocal}
% |\colourLocal| defines the colour for local session types, by default it
% is set to \withcolour{\colourLocal}{NavyBlue}.
%
% \item
% \DescribeMacro{\colourGlobal}
% |\colourGlobal| defines the colour for payload types, by default it is
% set to \withcolour{\colourGlobal}{VioletRed}.
%
% \item
% \DescribeMacro{\colourProc}
% |\colourProc| defines the colour for processes, by default it is set to
% \withcolour{\colourProc}{Maroon}.
%
% \item
% \DescribeMacro{\colourProcVar}
% |\colourProcVar| defines the colour for process variables, by default it
% is set to \withcolour{\colourProcVar}{Red}. Note that this colour does
% not apply to type variables in a recursive type.
% \end{itemize}
%
% Then, we use these colours to define formatting macros: by default you
% should not need to tweak them or use them directly.
%
% \begin{itemize}
% \item
% \DescribeMacro{\RoleFmt}
% |\RoleFmt| applies the role colour, and uses sans serif font in boldface
% by default, for example, $\RoleFmt{A}, \RoleFmt{B}, \RoleFmt{C},
% \RoleFmt{p}, \RoleFmt{q}, \RoleFmt{r}$.
%
% \item
% \DescribeMacro{\PayloadFmt}
% |\PayloadFmt| applies the payload type colour, and uses typewriter font
% by default, for example, $\PayloadFmt{S}, \PayloadFmt{T},
% \PayloadFmt{int}, \PayloadFmt{bool}$.
%
% \item
% \DescribeMacro{\LabelFmt}
% \DescribeMacro{\LocalFmt}
% \DescribeMacro{\GlobalFmt}
% \DescribeMacro{\ProcFmt}
% |\LabelFmt|, |\LocalFmt|, |\GlobalFmt|, and |\ProcFmt|
% simply apply the corresponding colours for the given syntax category.
% For example, label $\LabelFmt{l}$, local type $\LocalFmt{L}$, global type
% $\GlobalFmt{G}$, and process $\ProcFmt{P}$.
%
% \item
% \DescribeMacro{\TRecVarFmt}
% |\TRecVarFmt| is used to format type-level recursion variables, for
% example in a recursive global type or a recursive local type. By default,
% a boldface math font is used, for example $\TRecVarFmt{t}$ (no colour is
% attached, you can put it in a |\LocalFmt| or |\GlobalFmt| to give
% corresponding colour, like $\LocalFmt{\TRecVarFmt{t}}$ or
% $\GlobalFmt{\TRecVarFmt{t'}}$).
%
% \item
% \DescribeMacro{\PRecVarFmt}
% |\PRecVarFmt| is used to format process-level recursion variables, for
% example in a recursive process. By default, the macros applies its
% colour, for example, $\PRecVarFmt{X}$.\footnotemark
% \footnotetext{The reason why there are two macros for recursion variables
% is that (1) On the type level, we usually use an equi-recursive view to
% identify recursive types and their unfoldings, but not on the process
% level; and (2) Type variables and process variables should nonetheless be
% in separate syntactic categories or namespaces.}
% \end{itemize}
%
%\StopEventually{^^A
%  \PrintChanges
%  \PrintIndex
%}
%
% \newcommand{\rolep}{\RoleFmt{p}}
% \newcommand{\roleq}{\RoleFmt{q}}
% \newcommand{\lblL}[1][]{\LabelFmt{l_{#1}}}
% \newcommand{\gtG}[1][]{\GlobalFmt{G_{#1}}}
% \newcommand{\gtGi}[1][]{\GlobalFmt{{G}'_{#1}}}
% \newcommand{\ltL}[1][]{\LocalFmt{L_{#1}}}
% \newcommand{\ltLi}[1][]{\LocalFmt{{L}'_{#1}}}
% \section{Global Types}
% We show the syntax of global types below:
%   \[
%     \begin{array}{rcll}
%       \gtG & ::= & & \text{Global Types} \\
%            & \mid  & \gtComm[i \in I]{\rolep}{\roleq}{\lblL[i]}{\gtGi[i]}
%                    & \text{Message} \\
%            & \mid  & \gtRec{t}{\gtG}
%                    & \text{Recursion} \\
%            & \mid  & \gtRecVar{t}
%                    & \text{Type Variable} \\
%            & \mid  & \gtEnd
%                    & \text{End}
%     \end{array}
%   \]
%
% \section{Local Types}
% We show the syntax of local types below:
%   \[
%     \begin{array}{rcll}
%       \ltL & ::= & & \text{Local Types} \\
%            & \mid  & \ltExtC[i \in I]{\rolep}{\lblL[i]}{\ltLi[i]}
%                    & \text{Receiving} \\
%            & \mid  & \ltIntC[i \in I]{\rolep}{\lblL[i]}{\ltLi[i]}
%                    & \text{Sending} \\
%            & \mid  & \ltRec{t}{\ltL}
%                    & \text{Recursion} \\
%            & \mid  & \ltRecVar{t}
%                    & \text{Type Variable} \\
%            & \mid  & \ltEnd
%                    & \text{End}
%     \end{array}
%   \]
% \section{Processes}
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% We first define the colours.
%    \begin{macrocode}
\newcommand{\colourRole}{Teal}%
\newcommand{\colourLabel}{Indigo}%
\newcommand{\colourPayload}{DarkOrchid}%
\newcommand{\colourLocal}{NavyBlue}%
\newcommand{\colourGlobal}{VioletRed}%
\newcommand{\colourProc}{Maroon}%
\newcommand{\colourProcVar}{Red}%
\newcommand{\colourNet}{black}%
%    \end{macrocode}
%
% Some auxiliary helper functions:
%    \begin{macrocode}
\newcommand{\withcolour}[2]{{\color{#1}{#2}}}%
\newcommand{\ifempty}[3]{%
  \ifthenelse{\isempty{#1}}{#2}{#3}%
}%
\newcommand{\commChoice}[2]{%
  {#1} \mathbin{.} {#2}%
}%
%    \end{macrocode}
%
% Then we define the formatting macros:
%    \begin{macrocode}
\newcommand{\RoleFmt}[1]{\withcolour{\colourRole}{\textbf{\textsf{\upshape #1}}}}%
\newcommand{\PayloadFmt}[1]{\withcolour{\colourPayload}{\texttt{#1}}}%
\newcommand{\LabelFmt}[1]{\withcolour{\colourLabel}{#1}}%
\newcommand{\LocalFmt}[1]{\withcolour{\colourLocal}{#1}}%
\newcommand{\GlobalFmt}[1]{\withcolour{\colourGlobal}{#1}}%
\newcommand{\ProcFmt}[1]{\withcolour{\colourProc}{#1}}%
\newcommand{\TRecVarFmt}[1]{\mathbf{#1}}%
\newcommand{\PRecVarFmt}[1]{\withcolour{\colourProcVar}{#1}}%
%    \end{macrocode}
%
% Here we define global type macros.
%    \begin{macrocode}
\newcommand{\gtCommRaw}[4][]{\GlobalFmt{%
\ifempty{#1}{%
{{#2} \to {#3} \left\{ {#4} \right\} }%
}{%
{{#2} \to {#3} {\left\{ {#4} \right\}}_{\withcolour{black}{#1}}}%
}}}%
\newcommand{\gtComm}[5][]{\gtCommRaw[#1]{#2}{#3}{%
  \commChoice{#4}{#5}%
}}%
\newcommand{\gtCommSingle}[4]{\GlobalFmt{%
  {{#1} \to {#2} : \commChoice{#3}{#4}}%
}}%
\newcommand{\gtRec}[2]{\GlobalFmt{%
\mu\TRecVarFmt{#1}.{#2}%
}}%
\newcommand{\gtRecVar}[1]{\GlobalFmt{%
\TRecVarFmt{#1}%
}}%
\newcommand{\gtEnd}{\GlobalFmt{\texttt{\upshape end}}}%
%    \end{macrocode}
%
% Here we define local type macros.
%    \begin{macrocode}
\newcommand{\ltCRaw}[4][]{\LocalFmt{%
\ifempty{#1}{%
{#2} {#4} \left\{{#3}\right\}%
}{%
{#2} {#4} {\left\{{#3}\right\}}_{\withcolour{black}{#1}}%
}}}%
\newcommand{\ltIntCSymbol}{\LocalFmt{\oplus\mspace{-1mu}}}%
\newcommand{\ltExtCSymbol}{\LocalFmt{\&}}%
\newcommand{\ltIntCRaw}[3][]{\ltCRaw[#1]{#2}{#3}{\ltIntCSymbol}}%
\newcommand{\ltExtCRaw}[3][]{\ltCRaw[#1]{#2}{#3}{\ltExtCSymbol}}%
\newcommand{\ltIntC}[4][]{\ltIntCRaw[#1]{#2}{\commChoice{#3}{#4}}}%
\newcommand{\ltExtC}[4][]{\ltExtCRaw[#1]{#2}{\commChoice{#3}{#4}}}%
\newcommand{\ltIntCSingle}[3]{{#1}\ltIntCSymbol\mspace{2mu}{\commChoice{#2}{#3}}}%
\newcommand{\ltExtCSingle}[3]{{#1}\ltExtCSymbol{\commChoice{#2}{#3}}}%
\newcommand{\ltRec}[2]{\LocalFmt{%
\mu\TRecVarFmt{#1}.{#2}%
}}%
\newcommand{\ltRecVar}[1]{\LocalFmt{%
\TRecVarFmt{#1}%
}}%
\newcommand{\ltEnd}{\LocalFmt{\texttt{\upshape end}}}%
%    \end{macrocode}
% \begin{macro}{\dummyMacro}
% This is a dummy macro.  If it did anything, we'd describe its
% implementation here.
%    \begin{macrocode}
\newcommand{\dummyMacro}{}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\endinput
%</package>
%    \end{macrocode}
%\Finale
